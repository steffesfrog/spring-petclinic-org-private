name: JF RT CI with Maven + Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write     # Required for OIDC. This is required for requesting the JWT
  contents: read      # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest
#    env:
#      JF_PROJECT: ${{ vars.JF_PROJECT_KEY }}
#      JF_URL: https://${{ vars.JF_URL }}/
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
          cache: maven

      - uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        name: Setup JFrog CLI
        env:
          JF_URL: https://${{ vars.JF_URL }}/
          # JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
          oidc-provider-name: setup-jfrog-cli

      # Ping JFrog Platform Instance
      - name: Ping JF
        run: jf rt ping

      # Configure maven for JF
      - name: Configure JFrog CLI for Maven
        run: |
          jf mvnc \
            --global \
            --repo-resolve-releases ${{ vars.RT_PREFIX }}-libs-release \
            --repo-resolve-snapshots ${{ vars.RT_PREFIX }}-libs-snapshot \

      # use JF so we can capture in buildinfo.
      - name: Build and Test JF Maven
        run: jf mvn clean install -DskipTests
#          --build-name="spring-petclinic" \
#          --build-number=1.0.${{ github.run_number }}

      - name: Scan jar with XR (non-blocking)
        run: jf scan target/spring-petclinic*.jar --fail=false

      - name: Build Docker Image
        run: jf docker build -t ${{ vars.RT_DOCKER_REGISTRY }}spring-petclinic:1.0.${{ github.run_number }} .

      - name: Scan Docker image with XR (non-blocking)
        run: jf docker scan ${{ vars.RT_DOCKER_REGISTRY }}spring-petclinic:1.0.${{ github.run_number }} --fail=false

      - name: Push Docker Image to JFrog
        run: jf docker push ${{ vars.RT_DOCKER_REGISTRY }}spring-petclinic:1.0.${{ github.run_number }}

      - name: Publish Build Info
        run: |
          jfrog rt build-collect-env           # Collect environment variables
          jfrog rt build-add-dependencies .     # Add dependencies found in the current directory
          jfrog rt build-add-git                # Add Git commit information
          jf rt build-publish spring-petclinic 1.0.${{ github.run_number }}

      # Enable Build Indexing: enables xray to index and scan the build
      # This can also be done in the UI but isn't scalable
      # DON'T NEED TO DO THIS IF INSTEAD:
      # - Create a watch that auto-indexes builds, or
      # - Set up a project-wide policy for build indexing (IF USING JFROG PROJECTS)

#      - name: Enable Build Indexing in Xray
#        run: |
#          BUILD_NUMBER="1.0.${{ github.run_number }}"
#          PAYLOAD=$(cat <<EOF
#          {
#            "builds": [
#              {
#                "name": "spring-petclinic",
#                "build_number": "$BUILD_NUMBER"
#              }
#            ]
#          }
#          EOF
#          )
#          jf rt curl -XPOST /xray/api/v1/index/build \
#            -H "Content-Type: application/json" \
#            -d "$PAYLOAD"

      # Because using "jf rt build-publish" can use 'jf build-scan <build-name> <build-number"
      # Scans everything associated with the build: maven deps + docker layers
      # If not using "jf rt build-publish" then can use 'jf scan target/myapp.jar' or 'jf docker scan myimage:tag'
      # equivalent to 'jf xr scan --build spring-petclinic/1.0.${{ github.run_number }}' ?

      # without --fail=false, 'build-scan' expects at least one XR policy that has fail build on violation
      # need to create a policy with fail build checked..and attach that to a watch

      - name: Xray Scan with build-scan
        run: jf build-scan spring-petclinic 1.0.${{ github.run_number }}


        # run: jf build-scan spring-petclinic 1.0.${{ github.run_number }} --fail=false --vuln=true

        #  --fail [Default: true] When using one of the flags --watches, --project or --repo-path and a 'Fail build' rule is matched, the command will return exit code 3. Set to false if you'd like to see violations with exit code 0.
        # --vuln  [Default: false] Set to true if you'd like to receive all vulnerabilities, regardless of the policy configured in Xray. Ignored if provided 'format' is 'sarif'.
